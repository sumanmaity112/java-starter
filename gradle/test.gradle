import org.gradle.internal.logging.text.StyledTextOutputFactory

import static org.gradle.internal.logging.text.StyledTextOutput.Style

tasks.withType(Test).configureEach {
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = false
    }

    def out = services.get(StyledTextOutputFactory).create("testResults")

    afterSuite { desc, result ->
        if (!desc.parent) {
            out.withStyle(Style.Header).println("Result: ${result.resultType} (Total ${result.testCount} tests)")
            out.withStyle(Style.Success).println("        ${result.successfulTestCount} successes")
            out.withStyle(Style.Failure).println("        ${result.failedTestCount} failures")
            out.withStyle(Style.Info).println("        ${result.skippedTestCount} skipped")
        }
    }
}

// unit tests
test {
    mustRunAfter(spotlessCheck, checkstyleMain, checkstyleTest, pmdMain, pmdTest, spotbugsMain, spotbugsTest)

    useJUnitPlatform() {
        excludeTags "integration"
    }

    reports.html.required = false
}

// integration tests
tasks.register('integrationTest', Test) {
    description = "Runs the integration tests."
    group = "verification"

    mustRunAfter test

    useJUnitPlatform() {
        includeTags "integration"
    }

    reports.html.required = false
}

// Make sure `check` task calls integration test
check.dependsOn integrationTest

// Merge test reports
tasks.register('mergeTestReports', TestReport) {
    destinationDirectory = layout.buildDirectory.dir("reports/tests")

    getTestResults().from(files(layout.buildDirectory.dir("test-results/test/binary"), layout.buildDirectory.dir("test-results/integrationTest/binary")))
}

integrationTest.finalizedBy mergeTestReports
